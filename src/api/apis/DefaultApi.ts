/* tslint:disable */
/* eslint-disable */
/**
 * webkansu-backend
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    Bookmark,
    BookmarkFromJSON,
    BookmarkToJSON,
    CreateBookmarkRequestBody,
    CreateBookmarkRequestBodyFromJSON,
    CreateBookmarkRequestBodyToJSON,
    CreateNovelRequestBody,
    CreateNovelRequestBodyFromJSON,
    CreateNovelRequestBodyToJSON,
    GetCurrentUserResponseBody,
    GetCurrentUserResponseBodyFromJSON,
    GetCurrentUserResponseBodyToJSON,
    Novel,
    NovelFromJSON,
    NovelToJSON,
    NovelProvider,
    NovelProviderFromJSON,
    NovelProviderToJSON,
    RegisterUserRequestBody,
    RegisterUserRequestBodyFromJSON,
    RegisterUserRequestBodyToJSON,
    RegisterUserResponseBody,
    RegisterUserResponseBodyFromJSON,
    RegisterUserResponseBodyToJSON,
    SignInRequestBody,
    SignInRequestBodyFromJSON,
    SignInRequestBodyToJSON,
} from '../models';

export interface CreateBookmarkRequest {
    id: number;
    createBookmarkRequestBody: CreateBookmarkRequestBody;
}

export interface CreateNovelRequest {
    createNovelRequestBody: CreateNovelRequestBody;
}

export interface GetNovelBySlugRequest {
    provider: NovelProvider;
    slug: string;
}

export interface RegisterUserRequest {
    registerUserRequestBody: RegisterUserRequestBody;
}

export interface SignInRequest {
    signInRequestBody: SignInRequestBody;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     * しおりを作成する。
     */
    async createBookmarkRaw(requestParameters: CreateBookmarkRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Bookmark>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling createBookmark.');
        }

        if (requestParameters.createBookmarkRequestBody === null || requestParameters.createBookmarkRequestBody === undefined) {
            throw new runtime.RequiredError('createBookmarkRequestBody','Required parameter requestParameters.createBookmarkRequestBody was null or undefined when calling createBookmark.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/user/novels/{id}/bookmark`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateBookmarkRequestBodyToJSON(requestParameters.createBookmarkRequestBody),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BookmarkFromJSON(jsonValue));
    }

    /**
     * しおりを作成する。
     */
    async createBookmark(requestParameters: CreateBookmarkRequest, initOverrides?: RequestInit): Promise<Bookmark> {
        const response = await this.createBookmarkRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 小説を追加する。
     */
    async createNovelRaw(requestParameters: CreateNovelRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Novel>> {
        if (requestParameters.createNovelRequestBody === null || requestParameters.createNovelRequestBody === undefined) {
            throw new runtime.RequiredError('createNovelRequestBody','Required parameter requestParameters.createNovelRequestBody was null or undefined when calling createNovel.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/user/novels`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateNovelRequestBodyToJSON(requestParameters.createNovelRequestBody),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => NovelFromJSON(jsonValue));
    }

    /**
     * 小説を追加する。
     */
    async createNovel(requestParameters: CreateNovelRequest, initOverrides?: RequestInit): Promise<Novel> {
        const response = await this.createNovelRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * ログインしているユーザーの情報を返す。
     */
    async getCurrentUserRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<GetCurrentUserResponseBody>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/user`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetCurrentUserResponseBodyFromJSON(jsonValue));
    }

    /**
     * ログインしているユーザーの情報を返す。
     */
    async getCurrentUser(initOverrides?: RequestInit): Promise<GetCurrentUserResponseBody> {
        const response = await this.getCurrentUserRaw(initOverrides);
        return await response.value();
    }

    /**
     * slug から読んだことのある小説と最後に読んだ位置を返す。
     */
    async getNovelBySlugRaw(requestParameters: GetNovelBySlugRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Novel>> {
        if (requestParameters.provider === null || requestParameters.provider === undefined) {
            throw new runtime.RequiredError('provider','Required parameter requestParameters.provider was null or undefined when calling getNovelBySlug.');
        }

        if (requestParameters.slug === null || requestParameters.slug === undefined) {
            throw new runtime.RequiredError('slug','Required parameter requestParameters.slug was null or undefined when calling getNovelBySlug.');
        }

        const queryParameters: any = {};

        if (requestParameters.provider !== undefined) {
            queryParameters['provider'] = requestParameters.provider;
        }

        if (requestParameters.slug !== undefined) {
            queryParameters['slug'] = requestParameters.slug;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/user/novels/find`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => NovelFromJSON(jsonValue));
    }

    /**
     * slug から読んだことのある小説と最後に読んだ位置を返す。
     */
    async getNovelBySlug(requestParameters: GetNovelBySlugRequest, initOverrides?: RequestInit): Promise<Novel> {
        const response = await this.getNovelBySlugRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 読んだ小説の一覧を返す。
     */
    async listNovelsRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<Novel>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/user/novels`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(NovelFromJSON));
    }

    /**
     * 読んだ小説の一覧を返す。
     */
    async listNovels(initOverrides?: RequestInit): Promise<Array<Novel>> {
        const response = await this.listNovelsRaw(initOverrides);
        return await response.value();
    }

    /**
     * ユーザー登録をする。
     */
    async registerUserRaw(requestParameters: RegisterUserRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<RegisterUserResponseBody>> {
        if (requestParameters.registerUserRequestBody === null || requestParameters.registerUserRequestBody === undefined) {
            throw new runtime.RequiredError('registerUserRequestBody','Required parameter requestParameters.registerUserRequestBody was null or undefined when calling registerUser.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/auth`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RegisterUserRequestBodyToJSON(requestParameters.registerUserRequestBody),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RegisterUserResponseBodyFromJSON(jsonValue));
    }

    /**
     * ユーザー登録をする。
     */
    async registerUser(requestParameters: RegisterUserRequest, initOverrides?: RequestInit): Promise<RegisterUserResponseBody> {
        const response = await this.registerUserRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * ログインする。
     */
    async signInRaw(requestParameters: SignInRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.signInRequestBody === null || requestParameters.signInRequestBody === undefined) {
            throw new runtime.RequiredError('signInRequestBody','Required parameter requestParameters.signInRequestBody was null or undefined when calling signIn.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/auth/sign_in`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SignInRequestBodyToJSON(requestParameters.signInRequestBody),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * ログインする。
     */
    async signIn(requestParameters: SignInRequest, initOverrides?: RequestInit): Promise<object> {
        const response = await this.signInRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
